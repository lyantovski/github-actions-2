name: Azure Terraform CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # Defaults - update these or provide repository secrets if needed
  PREFIX: gha2
  LOCATION: swedencentral
  IMAGE_NAME: ghapp
  TAG: ${{ github.sha }}

  # Optionally set these secrets in the repo to use an existing ACR
  # AZURE_ACR_NAME and AZURE_ACR_RG are expected as repository secrets

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}
      ACR_RG: ${{ secrets.AZURE_ACR_RG }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      ACR_ID: ${{ secrets.AZURE_ACR_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

  # NOTE: using an existing ACR provided via secrets. The workflow requires
  # AZURE_ACR_NAME and AZURE_ACR_RG to be set in repository secrets.

      - name: Resolve ACR login server (using provided ACR)
        run: |
          set -euo pipefail

          fail() {
            echo "Error: $*" >&2
            exit 1
          }

          echo "Resolving ACR login server..."

          # Helper: try to lookup loginServer for given name and optional resource group
          lookup_registry() {
            local name="$1"
            local rg="${2-}"
            if [ -n "$rg" ]; then
              az acr show -n "$name" --resource-group "$rg" --query loginServer -o tsv || true
            else
              az acr show -n "$name" --query loginServer -o tsv || true
            fi
          }

          # Resolution order:
          # 1) If ACR_ID looks like a full resource id (/subscriptions/...), parse name+rg and use them
          # 2) If ACR_ID provided but not a full id, treat it as a registry name
          # 3) Otherwise, use ACR_NAME (try with RG if provided, otherwise name-only lookup)

          if [ -n "${ACR_ID-}" ]; then
            if [[ "$ACR_ID" == /subscriptions/* ]]; then
              echo "Parsing ACR resource id: $ACR_ID"
              ACR_NAME=$(basename "$ACR_ID")
              ACR_RG=$(echo "$ACR_ID" | sed -n 's|.*/resourceGroups/\([^/]*\)/.*|\1|p')
              [ -n "$ACR_NAME" ] || fail "could not determine registry name from id"
              echo "Parsed name=$ACR_NAME resourceGroup=$ACR_RG"
              REGISTRY=$(lookup_registry "$ACR_NAME" "$ACR_RG")
            else
              echo "ACR_ID provided but does not look like a resource id; treating as registry name: $ACR_ID"
              ACR_NAME="$ACR_ID"
              REGISTRY=$(lookup_registry "$ACR_NAME" "${ACR_RG-}")
            fi
          else
            [ -n "${ACR_NAME-}" ] || fail "provide AZURE_ACR_NAME or AZURE_ACR_ID as a secret"
            echo "Using ACR name: $ACR_NAME (resource group: ${ACR_RG-})"
            REGISTRY=$(lookup_registry "$ACR_NAME" "${ACR_RG-}")
          fi

          if [ -z "${REGISTRY-}" ] || [ -z "$REGISTRY" ]; then
            fail "could not resolve loginServer for ACR name='$ACR_NAME' (rg='${ACR_RG-}') - ensure the name and resource group are correct and the logged-in Azure identity has permission to read the registry"
          fi

          echo "Resolved registry: $REGISTRY"
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          if [ -n "${ACR_RG-}" ]; then
            echo "ACR_RG=$ACR_RG" >> $GITHUB_ENV
          fi

      - name: Build and push image to ACR
        run: |
          if [ -n "$ACR_USERNAME" ] && [ -n "$ACR_PASSWORD" ]; then
            echo "$ACR_PASSWORD" | docker login $REGISTRY --username $ACR_USERNAME --password-stdin
          else
            az acr login -n $ACR_NAME
          fi
          docker build -t $REGISTRY/${{ env.IMAGE_NAME }}:${{ env.TAG }} -f Dockerfile .
          docker push $REGISTRY/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Terraform Apply - create/update resources and configure Web App
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="prefix=${{ env.PREFIX }}" \
            -var="location=${{ env.LOCATION }}" \
            -var="image_name=${{ env.IMAGE_NAME }}" \
            -var="image_tag=${{ env.TAG }}" \
            -var="use_existing_acr=true" \
            -var="existing_acr_name=${{ env.ACR_NAME }}" \
            -var="existing_acr_rg=${{ env.ACR_RG }}" \
            -var="existing_acr_id=${{ env.ACR_ID }}" \
            -var="acr_admin_username=${{ env.ACR_USERNAME }}" \
            -var="acr_admin_password=${{ env.ACR_PASSWORD }}"
